Parameters:
  ResourcePrefix:
    Description: Name used to prefix most resources
    Type: String
    Default: psyoptions-tracker
    AllowedPattern : "[a-z\\-]*"
  HasuraContainerPort:
    Type: Number
    Default: 8080
  HasuraImageURI:
    Type: String
  SerumVialImageURI:
    Type: String
  ListenerImageURI:
    Type: String
  DashboardImageURI:
    Type: String
  RpcUrl:
    Type: String
    Default: https://api.devnet.solana.com
  HostedZoneId:
    Type: String
  HasuraDomainName:
    Description: The fully qualified domain name the Hasura DNS record sets belong to
    Type: String
    Default: www.example.com
  HasuraDomainCertificateArn:
    Description: The ARN of the SSL/TLS certificate to use for the secure the Hasura load balancer listener
    Type: String
  Ec2KeyNameParam:
    Description: The name of the EC2 keypair that is default added to instances
    Type: String

Mappings: 
  RegionMap:
    us-east-1: 
      "HasuraAmi": "ami-0313b4bfed0594a99"
    us-east-2: 
      "HasuraAmi": "ami-0c5ddf9bfd0e62c37"
    us-west-1: 
      "HasuraAmi": "ami-0e989ea8765644217"
    us-west-2: 
      "HasuraAmi": "ami-0623161c84070eab1"
    eu-central-1:
      "HasuraAmi": "ami-01a81696798f7f978"
    eu-north-1:
      "HasuraAmi": "ami-0311515c2f7729997"
    eu-west-1: 
      "HasuraAmi": "ami-0e0485cba3f4886ba"
    eu-west-2: 
      "HasuraAmi": "ami-04cb5c2cf3fadd9dd"
    eu-west-3: 
      "HasuraAmi": "ami-04cb5c2cf3fadd9dd"

Resources:
  # Create CloudWatch LogGroup for the task logs
  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
      RetentionInDays: 7

  # Create an ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Cluster']]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.10.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True

  # Create a Subnet
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'a']]
  # Create a Subnet
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'b']]

  # Create a Private Subnet
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.3.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'a']]

  # Create a route table to allow access to internet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Create a Route to allow access to internet using an internet gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach Public Route to SubnetA
  SubnetAPublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetA

  # Attach Public Route to SubnetB
  SubnetBPublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetB

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the internet gateway to the VPC
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create Access Role for ECS-Tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'ExecutionRole']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TimescaleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for ingress SSH and Timescale traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 172.10.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 172.10.0.0/16


  # Create the Timescale EC2 instance
  TimescaleEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      Affinity: String
      # AvailabilityZone: String
      BlockDeviceMappings: 
      # TODO re-evaluate block device for production work load
        - DeviceName: "/dev/sdm"
          Ebs: 
            DeleteOnTermination: false
            SnapshotId: String
            VolumeSize: 20
            VolumeType: gp3
      EbsOptimized: true
      # IamInstanceProfile: String
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, 'HasuraAmi' ]
      InstanceType: t3.small
      KeyName: !Ref Ec2KeyNameParam
      # Monitoring: Boolean
      NetworkInterfaces: 
        - AssociatePublicIpAddress: false
          Description: String
          DeviceIndex: 0
          GroupSet: 
            - !Ref TimescaleSecurityGroup
          SubnetId: !Ref PrivateSubnetA
      # Tune the Postgres configuration for timescale on the current instance size
      UserData:
        Fn::Base64:
          Fn::Join: [
            "",
            [
              "#!/bin/bash -xe\n",
              # TODO use secret manager for sensitive environment variables
              "export POSTGRES_USER=tracker\n",
              "export POSTGRES_DB=serum_markets\n",
              "export POSTGRES_PASSWORD=password\n",
              "create_sql=`mktemp`\n",
              "cat <<EOF >${create_sql}\n",
              "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;\n",
              "EOF\n",
              # Create the postgres user if it doesn't exists
              "psql -tc \"SELECT 1 FROM pg_user WHERE usename = '${POSTGRES_USER}'\" | grep -q 1 || psql -c \"CREATE USER ${POSTGRES_USER} WITH PASSWORD '${POSTGRES_PASSWORD}';\"\n",
              # initialize timescale extension on all databases
              "psql -U \"${POSTGRES_USER}\" postgres -f ${create_sql}\n",
              "psql -U \"${POSTGRES_USER}\" template1 -f ${create_sql}\n",
              # Create the new database if it doesn't exists
              "psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '${POSTGRES_DB}'\" | grep -q 1 | psql -U ${POSTGRES_USER} -c \"CREATE DATABASE ${POSTGRES_DB}\"\n",
              # Add Timescale extension to database if it doesn't exists yet
              "if [ \"${POSTGRES_DB:-postgres}\" != 'postgres' ]; then\n",
              "psql -U \"${POSTGRES_USER}\" \"${POSTGRES_DB}\" -f ${create_sql}\n",
              "fi\n",
              # Auto tune PG for timescale and the current instance type
              "timescaledb-tune --yes\n",
            ]
          ]

  # Create the Hasura TaskDefinition with container details
  HasuraTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Hasura']]
          Image: !Ref HasuraImageURI
          Cpu: 512
          Memory: 1024
          ReadonlyRootFilesystem: false
          Environment:
            - Name: PORT
              Value: !Ref HasuraContainerPort
            - Name: HASURA_GRAPHQL_CORS_DOMAIN
              Value: "*"
              # TODO replace with secrests / parameters
            - Name: HASURA_GRAPHQL_DATABASE_URL
              Value: !Join ['', ['postgres://tracker:password@', !GetAtt TimescaleEC2Instance.PrivateDnsName, '/serum_markets' ]]
            - Name: HASURA_GRAPHQL_DEV_MODE
              Value: false
            - Name: HASURA_GRAPHQL_ENABLE_CONSOLE
              Value: true
            - Name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              Value: startup, http-log, webhook-log, websocket-log, query-log
          PortMappings:
            - ContainerPort: !Ref HasuraContainerPort
              HostPort: !Ref HasuraContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group:
                !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
              awslogs-stream-prefix: 'Hasura'

  # Creat a security group for load balancer and open port 80 in bound from internet
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join [
          '-',
          [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'LoadBalancerSecurityGroup'],
        ]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Creat a security group for Containers and open in bound Container port from Load balancer security group to the Container
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join [
          '-',
          [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'ContainerSecurityGroup'],
        ]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref HasuraContainerPort
          ToPort: !Ref HasuraContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Create a LoadBalancer and attach the Security group and Subnets
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Type: application

  # Create a TargetGroup for HTTP port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref ResourcePrefix, 'Hasura']]
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true

  # Create a LoadBalancerListener and attach the TargetGroup and LoadBalancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Create a HTTPS LoadBalancerListener and attach the TargetGroup and LoadBalancer
  HttpsLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref HasuraDomainCertificateArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08

  # Create a DNS record for the specified Hosted Zone and subdomain
  Route53DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref HasuraDomainName
      Type: A

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
      - HttpsLoadBalancerListener
    Properties:
      ServiceName:
        !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'ECSService']]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref HasuraTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName:
            !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
          ContainerPort: !Ref HasuraContainerPort
          TargetGroupArn: !Ref TargetGroup
