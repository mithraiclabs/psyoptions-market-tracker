# TODO disable public IP addresses and move to private subnets where it makes sense (e.g. Serum Vial, Listener, Timescale)
# TODO make database EBS valume standalone so spinning up new instances use the same volume

Parameters:
  ResourcePrefix:
    Description: Name used to prefix most resources
    Type: String
    Default: psyoptions-tracker
    AllowedPattern : "[a-z\\-]*"
  SolanaRpcUrl:
    Description: The RPC URL used to connect with the solana blockchain
    Type: String
    Default: https://api.devnet.solana.com
  HasuraContainerPort:
    Type: Number
    Default: 8080
  SerumVialContainerPort:
    Type: Number
    Default: 8080
  TimescaleContainerPort:
    Type: Number
    Default: 5432
  HasuraImageURI:
    Type: String
  SerumVialImageURI:
    Type: String
  ListenerImageURI:
    Type: String
  DashboardImageURI:
    Type: String
  HostedZoneId:
    Type: String
  HasuraDomainName:
    Description: The fully qualified domain name the Hasura DNS record sets belong to
    Type: String
    Default: www.example.com
  HasuraDomainCertificateArn:
    Description: The ARN of the SSL/TLS certificate to use for the secure the Hasura load balancer listener
    Type: String
  Ec2KeyNameParam:
    Description: The name of the EC2 keypair that is default added to instances
    Type: String

Mappings: 
  RegionMap:
    us-east-1: 
      "AwsLinux2EcsOptimized": "ami-0dbd8c88f9060cf71"
    us-east-2: 
      "AwsLinux2EcsOptimized": "ami-062be0c2f0e7fb6d2"
    us-west-1: 
      "AwsLinux2EcsOptimized": "ami-09bc3667a66efbf89"
    us-west-2: 
      "AwsLinux2EcsOptimized": "ami-0a51409a409fbc030"
    eu-central-1:
      "AwsLinux2EcsOptimized": "ami-0ebfeb0108c46be41"
    eu-north-1:
      "AwsLinux2EcsOptimized": "ami-0035a9fe772fd6d60"
    eu-west-1: 
      "AwsLinux2EcsOptimized": "ami-0fc76c7f5cfa96e89"
    eu-west-2: 
      "AwsLinux2EcsOptimized": "ami-077f98d933531f865"
    eu-west-3: 
      "AwsLinux2EcsOptimized": "ami-0c8823759848d625a"

Resources:
  # Create CloudWatch LogGroup for the task logs
  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
      RetentionInDays: 7

  # Create an ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Cluster']]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.10.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True

  # Create a Subnet
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'a']]
  # Create a Subnet
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'b']]

  # Create a Private Subnet
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.3.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'a']]

  # Create a route table to allow access to internet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Create a Route to allow access to internet using an internet gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach Public Route to SubnetA
  SubnetAPublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetA

  # Attach Public Route to SubnetB
  SubnetBPublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetB

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the internet gateway to the VPC
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create Access Role for ECS-Tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'ExecutionRole']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # Create namespace for AWS Service Discovery
  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
        Name: private-psyoptions.io
        Vpc: !Ref VPC

  TimescaleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for ingress SSH and Timescale traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 172.10.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  TimescaleIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Join ['-', [!Ref ResourcePrefix, 'Timescale']]
      Roles: 
        - ecsInstanceRole

  # Create the Timescale EC2 instance
  TimescaleEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      BlockDeviceMappings: 
      # TODO re-evaluate block device for production work load
        - DeviceName: "/dev/sdm"
          Ebs: 
            DeleteOnTermination: false
            VolumeSize: 20
            VolumeType: gp3
      EbsOptimized: true
      IamInstanceProfile: !Ref TimescaleIamInstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, 'AwsLinux2EcsOptimized' ]
      InstanceType: t3.small
      KeyName: !Ref Ec2KeyNameParam
      # Monitoring: Boolean
      # TODO move the instance to a private subnet after setup and configuration is verified.
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref TimescaleSecurityGroup
          SubnetId: !Ref SubnetA
      UserData:
        Fn::Base64:
          Fn::Join: [
            "",
            [
              "#!/bin/bash -xe\n",
              !Join ['', ["echo ECS_CLUSTER=", !Ref Cluster, " >> /etc/ecs/ecs.config\n"]],
            ]
          ]

  # Create the Hasura TaskDefinition with container details
  TimescaleTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: host
      RequiresCompatibilities:
        - 'EC2'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Timescale']]
          Image: public.ecr.aws/s6m7j8l9/timescale/timescaledb:2.2.0-pg13
          ReadonlyRootFilesystem: false
          Environment:
            - Name: PORT
              Value: !Ref TimescaleContainerPort
            # TODO replace with secrets / parameters
            - Name: POSTGRES_DB
              Value: serum_markets
            - Name: POSTGRES_PASSWORD
              Value: password
            - Name: POSTGRES_USER
              Value: tracker
          PortMappings:
            - ContainerPort: !Ref TimescaleContainerPort
              HostPort: !Ref TimescaleContainerPort
          MemoryReservation: 1024
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group:
                !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
              awslogs-stream-prefix: 'Timescale'

  # Create the Hasura TaskDefinition with container details
  HasuraTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Hasura']]
          Image: !Ref HasuraImageURI
          Cpu: 512
          Memory: 1024
          ReadonlyRootFilesystem: false
          Environment:
            - Name: PORT
              Value: !Ref HasuraContainerPort
            - Name: HASURA_GRAPHQL_CORS_DOMAIN
              Value: "*"
              # TODO replace with secrets / parameters
            - Name: HASURA_GRAPHQL_DATABASE_URL
              Value: !Join ['', ['postgres://tracker:password@', !GetAtt TimescaleEC2Instance.PrivateIp , ':5432', '/serum_markets']] 
            - Name: HASURA_GRAPHQL_DEV_MODE
              Value: true
            - Name: HASURA_GRAPHQL_LOG_LEVEL
              Value: debug
            - Name: HASURA_GRAPHQL_ENABLE_CONSOLE
              Value: true
            - Name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              Value: startup, http-log, webhook-log, websocket-log, query-log
            - Name: HASURA_GRAPHQL_METADATA_DIR
              Value: /hasura-metadata
            - Name: HASURA_GRAPHQL_MIGRATIONS_DIR
              Value: /hasura-migrations
          PortMappings:
            - ContainerPort: !Ref HasuraContainerPort
              HostPort: !Ref HasuraContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group:
                !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
              awslogs-stream-prefix: 'Hasura'

  # Create the Serum Vial TaskDefinition with container details
  SerumVialTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'SerumVial']]
          Image: !Ref SerumVialImageURI
          Cpu: 512
          Memory: 1024
          ReadonlyRootFilesystem: true
          Environment:
            - Name: PORT
              Value: !Ref SerumVialContainerPort
            - Name: SV_ENDPOINT
              Value: !Ref SolanaRpcUrl
            - Name: SV_LOG_LEVEL
              Value: info
            - Name: SV_MARKETS_JSON
              Value: markets.json
          PortMappings:
            - ContainerPort: !Ref SerumVialContainerPort
              HostPort: !Ref SerumVialContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group:
                !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
              awslogs-stream-prefix: 'SerumVial'

  # Creat a security group for load balancer and open port 80 in bound from internet
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join [
          '-',
          [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'LoadBalancerSecurityGroup'],
        ]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Creat a security group for Containers and open in bound Container port from Load balancer security group to the Container
  HasuraContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join [
          '-',
          [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Hasura ContainerSecurityGroup'],
        ]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref HasuraContainerPort
          ToPort: !Ref HasuraContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Create a LoadBalancer and attach the Security group and Subnets
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Type: application

  # Create a TargetGroup for HTTP port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref ResourcePrefix, 'Hasura']]
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /healthz
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true

  # Create a LoadBalancerListener and attach the TargetGroup and LoadBalancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Create a HTTPS LoadBalancerListener and attach the TargetGroup and LoadBalancer
  HttpsLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref HasuraDomainCertificateArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08

  # Create a DNS record for the specified Hosted Zone and subdomain
  Route53DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref HasuraDomainName
      Type: A

  # Create a ECS Service for the Timescale DB task
  TimescaleECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - TimescaleEC2Instance
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TimescaleTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      EnableExecuteCommand: true

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  HasuraECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
      - HttpsLoadBalancerListener
      - TimescaleECSService
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref HasuraTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref HasuraContainerSecurityGroup
      LoadBalancers:
        - ContainerName:
            !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Hasura']]
          ContainerPort: !Ref HasuraContainerPort
          TargetGroupArn: !Ref TargetGroup

  # Create the discovery service for Serum Vial
  SerumVialDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: Discovery Service for the Serum Vial task
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: SRV
          - TTL: 60
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Join ['-', [!Ref ResourcePrefix, 'serum-vial']]
      NamespaceId: !Ref PrivateNamespace

  # Create a security group for Containers and open in bound Container port
  SerumVialContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join [
          '-',
          [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'SerumVial ContainerSecurityGroup'],
        ]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SerumVialContainerPort
          ToPort: !Ref SerumVialContainerPort
          CidrIp: 172.10.0.0/16

  SerumVialECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HasuraECSService
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref SerumVialTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref SerumVialContainerSecurityGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt SerumVialDiscoveryService.Arn
          ContainerName: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'SerumVial']]
          ContainerPort: !Ref SerumVialContainerPort

  # Create the Serum Vial TaskDefinition with container details
  ListenerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Listener']]
          Image: !Ref ListenerImageURI
          Cpu: 256
          Memory: 512
          ReadonlyRootFilesystem: true
          Environment:
            - Name: GRAPHQL_URL
              Value: !Join ['', ['https://', !Ref HasuraDomainName, '/v1/graphql']]
            - Name: SERUM_VIAL_URL
              Value: !Join ['', ['ws://', !GetAtt SerumVialDiscoveryService.Name, '.private-psyoptions.io:', !Ref SerumVialContainerPort, '/v1/ws']]
            - Name: CHANNELS
              Value: trades, level1, level2, level3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group:
                !Join ['-', [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Container']]
              awslogs-stream-prefix: 'Listener'

  # Create a security group for Containers and open in bound Container port
  ListenerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join [
          '-',
          [!Ref ResourcePrefix, !Ref 'AWS::AccountId', 'Listener Service SecurityGroup'],
        ]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 172.10.0.0/16

  ListenerECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HasuraECSService
      - SerumVialECSService
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref ListenerTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ListenerServiceSecurityGroup
